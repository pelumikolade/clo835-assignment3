Deploy Python Application with Persistent MySql Database on EKS (using Storage Class (SC), Persistent Volume (PV) and Persistent Volume Claim (PVC))

Prequisites: 
Images are pushed to a repo
EKS Cluster with 2 Worker Nodes is Deployed (eks cluster manifest (eks_config) is also in the repository)
Steps:

Using Storage class and PVC

#Create base64 encoded password
echo -n 'admin' | base64
#Create the Namspace
k create ns lab3
#Create the secrets
k create -f secrets.yaml -n lab3                                                                                                                                                                                   
#Create configmap
k create -f config-map.yaml -n lab3                                                                                                                                                                                
#Create storage class
k create -f storage_class.yaml -n lab3
#Create PV
k create -f pv.yaml -n lab3
#Create PVC
k create -f pvc.yaml -n lab3                                                                                                                                                                                       
#Create the deployment of the Database
k apply -f db-deployment.yaml -n lab3
#Create deployment of the cluster IP service for the Database
k create -f db-service.yaml -n lab3
#Verify that the database and service has been created
k get all -n lab3
#Create the app deployment
k apply -f app-deployment.yaml -n lab3
#Create Service type Load Balancer for the application
k create -f app-service.yaml -n lab3
#Verify the app and its service has been deployed
k get all -n lab3
#get the external IP (URL) of the load balancer, it should look like this a5d6959c46b2e46399ddc437426f3627-1993196841.us-east-1.elb.amazonaws.com
#Paste the url in a browser with a column and the exposed port. In this case it is "a5d6959c46b2e46399ddc437426f3627-1993196841.us-east-1.elb.amazonaws.com:8080"
#Add some data into the database
#Delete the running database pod
k delete <name of running database pod> -n lab3
#Verify that another db pod has been created to replace the deleted one
k get all -n lab3
#Delete the app pods as well so that the app deployemnt can replace with new pods
k delete <name of app pod1> <name of app pod2> -n lab3
#Verify new app pods were created
k get all -n lab3
#Navigate back to the browser, refresh the url and try to retrieve the data that was stored.

Using Hostpath
# Create a new namespace
k create ns lab7
#Create secret for the db and app
k create -f secrets.yaml -n lab7
#Create the configmap
k create -f config-map.yaml -n lab7                                                                                                                                                                                
#Create persistent volume
k create -f pv-hp.yaml -n lab7                                                                                                                                                                                     
#Create persistent volume vlaim
k create -f pvc-hp.yaml -n lab7                                                                                                                                                                                    
#create the db deployment using hostpath
k create -f ab-deployment-hp.yaml -n lab7                                                                                                                                                                          
#Verify the db pod was created
k po -n lab7
#Create the db service
k create -f db-service.yaml -lab7
#create the app deployment
k apply -f app-deployment.yaml -n lab7
#Verify the app has been deployed
k get po -n lab7
#Deploy the app service
k create -f app-service.yaml -n lab7
#get the url for the load balancer like we did before                                                                3306/TCP         2m9s
#open a browser and verify you have access to the app.
#Perform all other checks by deleting the pods and checking for persistent data like we did before.

Bonus
Using configmap
Preequiste: 
The db and cluster ip service is already running 
Confirm that the secret and config map is deployed
Confirm that database is deployed and also running
#Run the manifest that specifies the app color as an env variable in the manifest
k apply -f app-deployment-color.yaml -n lab3
#verify the app pod is runnning
k get po -n lab3
#Create the service for the app if it is not running.
k create -f app-service.yaml -n lab3
#get the url of the loadbalancer
k get svc -n lab3
#verify the app is running in blue background colour on the web browser
#Delete the created deployment
k delete deployment app-deployment -n lab3
#Deploy the app specifying the manifest specifying the colour from the configmap.
k apply -f app-deployment-color-cm.yaml -n lab3
#confirm the app pod is running
k get po -n lab3
#go back top the browser to confirm the app still has a  blue background 
#delete the app deployment
k delete deployment app-deployment -n lab3
#Deploy the app with a manifest that specifies the app colour as a secret
k apply -f app-deployment-color-secret.yaml -n lab3                                                                                                                                                                
#confirm the application pod is running
k get po -n lab3
#Go back to the browser to access the application and confirm the background is blue.

That is the end of the assignment.
Thank you 

